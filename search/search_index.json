{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Suspycious","text":"<p>Suspycious is a Python implementation of the Sus protocol. It is a  secure, asynchronous, and easy to use protocol for sending messages between two parties.</p> <p>Pre-alpha software</p> <p>Suspycious is currently in an early stage of development and should not be used in production.</p>"},{"location":"#installation","title":"Installation","text":"<p>Suspycious is available on PyPI and can be installed with pip:</p> <pre><code>pip install suspycious\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>The following example shows how to create a simple Sus network with a client and a server. The client sends a message to the server and the server responds with a message.</p> <pre><code>import asyncio\n\nfrom sus import SusServer\n\n\n\nserver = SusServer(('localhost', 5000), b\"my secret key\")\n\nasync def message_handler(addr: tuple[str, int], p_id: int, message: bytes):\n    print(f\"Received message from {addr}: {message.decode()}\")\n    server.send(addr, b\"Hello from the server!\")\n\nasyncio.run(server.start([message_handler]))\n</code></pre> <pre><code>import asyncio\n\nfrom sus import SusClient\n\nclient = SusClient(('localhost', 5000), b\"server public key\")\nasyncio.run(client.start())\nclient.send(b\"Hello from the client!\")\n</code></pre>"},{"location":"sus/","title":"The Sus Protocol","text":"<p>Sus is a secure and asynchronous protocol for sending messages between two parties. It is designed to be easy to use and to be secure against active and passive attacks. Sus makes it easy to send messages between two parties without having to worry about encryption, authentication, or message ordering.</p>"},{"location":"sus/#features","title":"Features","text":"<ul> <li>Secure - Sus is secure against active and passive attacks. It uses the XChaCha20-Poly1305 authenticated encryption algorithm to encrypt and authenticate messages. It uses X25519 for key exchange and Ed25519 for authentication.</li> <li>Asynchronous - Sus is asynchronous and uses UDP as the underlying transport protocol. This means that messages are not guaranteed to arrive in the same order as they were sent. Sus takes care of reordering messages and discarding duplicate messages.</li> <li>Easy to use - Sus is designed to be easy to use. It is easy to set up a Sus network and send messages between two parties.</li> </ul>"},{"location":"sus/#design","title":"Design","text":"<pre><code>sequenceDiagram\n    participant A as Alice\n    participant B as Bob\n\n    A-&gt;&gt;B: key, nonce\n    B-&gt;&gt;A: key, nonce\n    A-&gt;&gt;B: token</code></pre>"},{"location":"sus/#key-exchange","title":"Key exchange","text":"<p>The key exchange is done using the X25519 key exchange algorithm. The key exchange is done in the following steps:</p> <ol> <li>Alice generates a key pair and sends the public key to Bob.</li> <li>Bob generates a key pair and sends the public key to Alice.</li> <li>Alice generates a shared secret using her private key and Bob's public key.</li> <li>Bob generates a shared secret using his private key and Alice's public key.</li> <li>Alice and Bob now have the same shared secret.</li> </ol> <p>something something secret key</p>"}]}